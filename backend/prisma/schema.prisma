generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [uuidOssp(map: "uuid-ossp")]
}

model Pessoa {
  id                    String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at            DateTime        @default(now()) @db.Timestamp(6)
  updated_at            DateTime        @default(now()) @db.Timestamp(6)
  tipo                  TipoPessoa      @default(F)
  numero_endereco       String?
  email                 String?          @db.VarChar
  id_endereco           String?         @db.Uuid
  endereco              Endereco?       @relation(fields: [id_endereco], references: [id], onDelete: Cascade, onUpdate: Cascade)
  telefone              PessoaTelefone[]
  pessoaFisica          PessoaFisica?
  pessoaJuridica        PessoaJuridica?
  @@map("pessoa")
}

model PessoaFisica {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  nome            String?
  rg              String?   @db.VarChar(30)
  cpf             String?   @db.VarChar(14)
  data_nascimento DateTime?
  id_pessoa       String?   @unique @db.Uuid
  pessoa          Pessoa?  @relation(fields: [id_pessoa], references: [id], onDelete: Cascade, onUpdate: Cascade)
  diretor         Diretor?
  @@map("pessoa_fisica")
}

model Telefone {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  ddd        String?
  numero     String?  @db.VarChar(10)
  pessoa     PessoaTelefone[]
  unidade_telefone    UnidadeTelefone[]
  @@map("telefone")
}

model PessoaJuridica {
  id                 String    @id(map: "PK_bee78e8f1760ccf9cff402118a6") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  nome_fantasia      String    @db.VarChar(100)
  razao_social       String?    @db.VarChar(100)
  inscricao_estadual String?   @db.VarChar(30)
  inscricao_federal  String?   @db.VarChar(30)
  cnpj               String?   @db.VarChar(14)
  data_constituicao  DateTime?

  id_pessoa          String?   @unique @db.Uuid
  pessoa             Pessoa?  @relation(fields: [id_pessoa], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unidade_escolar    UnidadeEscolar[]
  @@map("pessoa_juridica")
}

model Endereco {
  id         String   @id(map: "PK_2a6880f71a7f8d1c677bb2a32a8") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  cep        String?  @db.VarChar(8)
  logradouro String?  @db.VarChar(60)
  municipio  String?  @db.VarChar(30)
  bairro     String?  @db.VarChar(50)
  id_estado  String?  @db.Uuid
  estado     Estado?  @relation(fields: [id_estado], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pessoa     Pessoa[]
  @@map("endereco")
}

model Permission {
  id                String           @id(map: "PK_920331560282b8bd21bb02290df") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  name              String           @db.VarChar
  description       String           @db.VarChar
  permissions_roles PermissionRole[]
  users_permissions UserPermission[]

  @@map("permissions")
}

model UnidadeEscolar {
  id                  String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at          DateTime    @default(now()) @db.Timestamp(6)
  updated_at          DateTime    @default(now()) @db.Timestamp(6)
  nome                String?
  id_pessoa           String?     @db.Uuid
  pessoa              PessoaJuridica?    @relation(fields: [id_pessoa], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unidade_telefone    UnidadeTelefone[]
  id_diretor          String?     @unique @db.Uuid
  diretor             Diretor?    @relation(fields: [id_diretor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("unidade_escolar")
}

model Diretor {
  id                 String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id_pessoa          String?     @unique @db.Uuid
  pessoa             PessoaFisica?    @relation(fields: [id_pessoa], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unidade_escolar    UnidadeEscolar?
  @@map("diretor")
}

model Ocorrencia {
  id        String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at          DateTime    @default(now()) @db.Timestamp(6)
  updated_at          DateTime    @default(now()) @db.Timestamp(6)
  tipo_ocorrencia   TipoOcorrencia
  Data    DateTime?    @db.Date
  Hora    DateTime?     @db.Time(0)
  Descricao     String?   @db.Text
  @@map("ocorrencia")
}

model PessoaTelefone {
  id_pessoa       String     @db.Uuid
  id_telefone      String     @db.Uuid
  pessoa    Pessoa  @relation(fields: [id_pessoa], references: [id], onDelete: Cascade)
  telefone  Telefone       @relation(fields: [id_telefone], references: [id], onDelete: Cascade)

  @@id([id_pessoa, id_telefone])
  @@index([id_pessoa])
  @@index([id_telefone])
  @@map("pessoa_telefone")
} 

model UnidadeTelefone {
  id_unidade       String     @db.Uuid
  id_telefone      String     @db.Uuid
  unidade   UnidadeEscolar @relation(fields: [id_unidade], references: [id], onDelete: Cascade)
  telefone  Telefone       @relation(fields: [id_telefone], references: [id], onDelete: Cascade)

  @@id([id_unidade, id_telefone])
  @@index([id_unidade])
  @@index([id_telefone])
  @@map("unidade_telefone")
} 

model PermissionRole {
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "FK_3309f5fa8d95935f0701027f2bd")
  roles         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "FK_e08f6859eaac8cbf7f087f64e2b")

  @@id([role_id, permission_id], map: "PK_838ed6e68b01d6912fa682bedef")
  @@index([permission_id], map: "IDX_3309f5fa8d95935f0701027f2b")
  @@index([role_id], map: "IDX_e08f6859eaac8cbf7f087f64e2")
  @@map("permissions_roles")
}

model RefreshToken {
  id         String   @id(map: "PK_b575dd3c21fb0831013c909e7fe") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  expires_in Int
  token      String   @db.VarChar
  id_user    String?  @db.Uuid
  users      User?    @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fd79923e4359a26a971f841fb5e")

  @@map("refresh_token")
}

model Role {
  id                String           @id(map: "PK_c1433d71a4838793a49dcad46ab") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  name              String           @db.VarChar
  description       String           @db.VarChar
  permissions_roles PermissionRole[]
  users_roles       UserRole[]

  @@map("roles")
}

model User {
  id                String           @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  username          String           @db.VarChar
  email             String           @unique @db.VarChar
  password          String           @db.VarChar
  provider          String?          @db.VarChar
  id_provider       String?          @db.VarChar
  image             String?          @db.VarChar
  email_verified    DateTime?
  accounts          Account[]
  refresh_token     RefreshToken[]
  sessions          Session[]
  users_permissions UserPermission[]
  users_roles       UserRole[]
  @@map("users")
}

model UserPermission {
  user_id       String     @db.Uuid
  permission_id String     @db.Uuid
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "FK_b09b9a210c60f41ec7b453758e9")
  users         User       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_4de7d0b175f702be3be55270023")

  @@id([user_id, permission_id], map: "PK_7f3736984cd8546a1e418005561")
  @@index([user_id], map: "IDX_4de7d0b175f702be3be5527002")
  @@index([permission_id], map: "IDX_b09b9a210c60f41ec7b453758e")
  @@map("users_permissions")
}

model UserRole {
  user_id         String    @db.Uuid
  role_id         String    @db.Uuid
  roles           Role      @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "FK_1cf664021f00b9cc1ff95e17de4")
  users           User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_e4435209df12bc1f001e5360174")

  @@id([user_id, role_id], map: "PK_c525e9373d63035b9919e578a9c")
  @@index([role_id], map: "IDX_1cf664021f00b9cc1ff95e17de")
  @@index([user_id], map: "IDX_e4435209df12bc1f001e536017")
  @@map("users_roles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Estado {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  uf       String
  nome     String
  ddd      Int?       @db.SmallInt
  endereco Endereco[]

  @@map("estado")
}

enum TipoPessoa {
  F
  J
}

enum TipoOcorrencia {
  Roubo
  Furto
  Vulnerabilidade
  Intrusao
  Ameaca
  UsoArma
  PorteArma
  DanosPatrimonio
  AmeacaEscola
}