generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

view OcorrenciasUnidade {
  id     String @id
  escola String
  total_ocorrencias Int
}

view OcorrenciasTipo {
  id    String @id
  tipo_ocorrencia   String
  total_ocorrencias Int
}

view OcorrenciasMes {
  mes   String  @id
  total_ocorrencias Int
}

view OcorrenciasEnvolvidos {
  id      String @id
  nome_envolvido    String
  tipo_envolvido    String
  papel             String
}

view OcorrenciasResponsavel {
  id      String @id
  escola  String
  tipo    String
  data_ocorrencia   DateTime @db.Date
  local         String
  status        String
  registrado_por  String
}

model Pessoa {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  tipo            TipoPessoa       @default(F)
  email           String?          @db.VarChar
  telefone        String?
  endereco_id     String?          @db.Uuid
  diretor         Diretor[]
  endereco        Endereco?        @relation(fields: [endereco_id], references: [id], onDelete: Cascade)
  pessoaFisica    PessoaFisica?
  pessoaJuridica  PessoaJuridica?
  unidade_escolar UnidadeEscolar[]

  @@map("pessoa")
}

model PessoaFisica {
  pessoa_id       String    @id @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  nome            String? 
  rg              String?   @db.VarChar(30)
  cpf             String?   @unique @db.VarChar(14)
  data_nascimento DateTime?
  pessoa          Pessoa    @relation(fields: [pessoa_id], references: [id])

  @@map("pessoa_fisica")
}

model PessoaJuridica {
  pessoa_id          String    @id @db.Uuid
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  nome_fantasia      String    @db.VarChar(100)
  razao_social       String?   @db.VarChar(100)
  inscricao_estadual String?   @db.VarChar(30)
  inscricao_federal  String?   @db.VarChar(30)
  cnpj               String?   @db.VarChar(14)
  data_constituicao  DateTime?
  pessoa             Pessoa    @relation(fields: [pessoa_id], references: [id])

  @@map("pessoa_juridica")
}

model Endereco {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  cep        String?  @db.VarChar(8)
  logradouro String?  @db.VarChar(60)
  numero     String?
  municipio  String?  @db.VarChar(30)
  bairro     String?  @db.VarChar(50)
  estado_id  String?  @db.Uuid
  estado     Estado?  @relation(fields: [estado_id], references: [id])
  pessoa     Pessoa[]

  @@map("endereco")
}

model Permission {
  id                String           @id(map: "PK_920331560282b8bd21bb02290df") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  name              String           @db.VarChar
  description       String           @db.VarChar
  permissions_roles PermissionRole[]
  users_permissions UserPermission[]

  @@map("permissions")
}

enum ZonaUnidade {
  rural
  urbana
}

model UnidadeEscolar {
  id                   String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at           DateTime              @default(now()) @db.Timestamp(6)
  updated_at           DateTime              @default(now()) @db.Timestamp(6)
  zona                 ZonaUnidade           @default(urbana)
  inep                 Int?
  pessoa_id            String?               @db.Uuid
  diretor_id           String?               @db.Uuid
  diretor              Diretor?              @relation(fields: [diretor_id], references: [id])
  // diretor              Diretor[]
  ocorrencia           Ocorrencia[]
  responsavel_registro ResponsavelRegistro[]
  pessoa               Pessoa?               @relation(fields: [pessoa_id], references: [id])

  @@map("unidade_escolar")
}

model ResponsavelRegistro {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome        String
  cargo       String?
  telefone    String?
  email       String?
  unidade_id  String         @db.Uuid
  ocorrencias Ocorrencia[]
  unidade     UnidadeEscolar @relation(fields: [unidade_id], references: [id])

  @@map("responsavel_registro")
}

model Diretor {
  id         String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pessoa_id  String?          @db.Uuid
  pessoa     Pessoa?          @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unidade    UnidadeEscolar[]

  @@map("diretor")
}

model Ocorrencia {
  id              String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at      DateTime              @default(now()) @db.Timestamp(6)
  updated_at      DateTime              @default(now()) @db.Timestamp(6)
  data            DateTime?             @db.Date
  hora            DateTime?             @db.Time(0)
  local           String?
  descricao       String?
  tipo_id         String                @db.Uuid
  responsavel_id  String?               @db.Uuid
  user_id         String                @db.Uuid
  unidade_id      String                @db.Uuid
  anexos          AnexoOcorrencia[]
  envolvidos      EnvolvidoOcorrencia[]
  registro_por    ResponsavelRegistro?  @relation(fields: [responsavel_id], references: [id])
  tipo_ocorrencia TipoOcorrencia        @relation(fields: [tipo_id], references: [id])
  unidade_escolar UnidadeEscolar        @relation(fields: [unidade_id], references: [id])
  user            User                  @relation(fields: [user_id], references: [id])

  @@map("ocorrencia")
}

model Envolvido {
  id          String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome        String
  tipo        String
  observacoes String?
  ocorrencias EnvolvidoOcorrencia[]

  @@map("envolvido")
}

model EnvolvidoOcorrencia {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ocorrencia_id String?     @db.Uuid
  envolvido_id  String?     @db.Uuid
  papel         String
  envolvido     Envolvido?  @relation(fields: [envolvido_id], references: [id])
  ocorrencia    Ocorrencia? @relation(fields: [ocorrencia_id], references: [id])

  @@map("envolvido_ocorrencia")
}

model AnexoOcorrencia {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ocorrencia_id   String     @db.Uuid
  caminho_arquivo String
  tipo_arquivo    String
  descricao       String
  ocorrencia      Ocorrencia @relation(fields: [ocorrencia_id], references: [id])

  @@map("anexo_ocorrencia")
}

model PermissionRole {
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "FK_3309f5fa8d95935f0701027f2bd")
  roles         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "FK_e08f6859eaac8cbf7f087f64e2b")

  @@id([role_id, permission_id], map: "PK_838ed6e68b01d6912fa682bedef")
  @@index([permission_id], map: "IDX_3309f5fa8d95935f0701027f2b")
  @@index([role_id], map: "IDX_e08f6859eaac8cbf7f087f64e2")
  @@map("permissions_roles")
}

model RefreshToken {
  id         String   @id(map: "PK_b575dd3c21fb0831013c909e7fe") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  expires_in Int
  token      String   @db.VarChar
  id_user    String?  @db.Uuid
  users      User?    @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fd79923e4359a26a971f841fb5e")

  @@map("refresh_token")
}

model Role {
  id                String           @id(map: "PK_c1433d71a4838793a49dcad46ab") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  name              String           @db.VarChar
  description       String           @db.VarChar
  permissions_roles PermissionRole[]
  users_roles       UserRole[]

  @@map("roles")
}

model User {
  id                String           @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  updated_at        DateTime         @default(now()) @db.Timestamp(6)
  username          String           @db.VarChar
  email             String           @unique @db.VarChar
  password          String           @db.VarChar
  provider          String?          @db.VarChar
  id_provider       String?          @db.VarChar
  image             String?          @db.VarChar
  email_verified    DateTime?
  accounts          Account[]
  ocorrencia        Ocorrencia[]
  refresh_token     RefreshToken[]
  sessions          Session[]
  users_permissions UserPermission[]
  users_roles       UserRole[]

  @@map("users")
}

model UserPermission {
  user_id       String     @db.Uuid
  permission_id String     @db.Uuid
  users         User       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_4de7d0b175f702be3be55270023")
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "FK_b09b9a210c60f41ec7b453758e9")

  @@id([user_id, permission_id], map: "PK_7f3736984cd8546a1e418005561")
  @@index([user_id], map: "IDX_4de7d0b175f702be3be5527002")
  @@index([permission_id], map: "IDX_b09b9a210c60f41ec7b453758e")
  @@map("users_permissions")
}

model UserRole {
  user_id String @db.Uuid
  role_id String @db.Uuid
  roles   Role   @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "FK_1cf664021f00b9cc1ff95e17de4")
  users   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_e4435209df12bc1f001e5360174")

  @@id([user_id, role_id], map: "PK_c525e9373d63035b9919e578a9c")
  @@index([role_id], map: "IDX_1cf664021f00b9cc1ff95e17de")
  @@index([user_id], map: "IDX_e4435209df12bc1f001e536017")
  @@map("users_roles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Estado {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  uf       String
  nome     String
  ddd      Int?       @db.SmallInt
  endereco Endereco[]

  @@map("estado")
}

model TipoOcorrencia {
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nome       String
  Ocorrencia Ocorrencia[]

  @@map("tipo_ocorrencia")
}

enum TipoPessoa {
  F
  J
}
